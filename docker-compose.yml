services:
  # Spring Boot 애플리케이션
  load-back-boot-app:

    container_name: load-back-boot-app
    build: #현재 Root의 Dockerfile을 이용한 build
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # Spring Boot 애플리케이션 포트
    environment:
#      주의할 점 : container로 생성되는 service이름을 Mapping 해야함.
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/load_balancing_back?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
      - SPRING_DATASOURCE_USERNAME=changddao
      - SPRING_DATASOURCE_PASSWORD=Ych591204^
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none  # DDL옵션 끄기
      - SPRING_JPA_SHOW_SQL=true

    depends_on:
      mysql:
        condition: service_healthy
    restart: always
    networks:
      - appnet

  # MySQL 데이터베이스
  mysql:
    image: mysql:latest
    container_name: load_mysql
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: load_balancing_back
      MYSQL_USER: changddao
      MYSQL_PASSWORD: Ych591204^
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
    ports:
      - "3306:3306"  # MySQL 포트
    volumes:
      - mysql-data:/var/lib/mysql  # 데이터 지속성 설정
    networks:
      - appnet

networks:
  appnet:
    driver: bridge

volumes:
  mysql-data:

#
#  # Nginx 웹 서버
#  nginx:
#    image: nginx:latest
#    container_name: nginx
#    ports:
#      - "80:80"  # Nginx 포트 (웹 서버는 80번 포트를 사용)
#    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf  # Nginx 설정 파일
#      - ./static:/usr/share/nginx/html  # 정적 파일을 Nginx의 html 폴더에 매핑
#    depends_on:
#      - springboot-app  # Nginx는 Spring Boot 애플리케이션이 실행된 후에 시작
#    networks:
#      - appnet
#

